#!/usr/bin/python

import math

def main():
    action = 'decrypt'
    key = 3
    if action == 'encrypt':
        text = "ABCDEFGHIJKLMNOPQRSTUVWXYZBCDEFGHIJKLMNOPQRSTUVWXYZACDEFGHIJKLMNOPQRSTUVWXYZABDEFGHIJKLMNOPQRSTUVWXYZABCEFGHIJKLMNOPQRSTUVWXYZABCDFGHIJKLMNOPQRSTUVWXYZABCDEGHIJKLMNOPQRSTUVWXYZABCDEFHIJKLMNOPQRSTUVWXYZABCDEFGIJKLMNOPQRSTUVWXYZABCDEFGHJKLMNOPQRSTUVWXYZABCDEFGHIKLMNOPQRSTUVWXYZABCDEFGHIJLMNOPQRSTUVWXYZABCDEFGHIJKMNOPQRSTUVWXYZABCDEFGHIJKLNOPQRSTUVWXYZABCDEFGHIJKLMOPQRSTUVWXYZABCDEFGHIJKLMNPQRSTUVWXYZABCDEFGHIJKLMNOQRSTUVWXYZABCDEFGHIJKLMNOPRSTUVWXYZABCDEFGHIJKLMNOPQSTUVWXYZABCDEFGHIJKLMNOPQRTUVWXYZABCDEFGHIJKLMNOPQRSUVWXYZABCDEFGHIJKLMNOPQRSTVWXYZABCDEFGHIJKLMNOPQRSTUWXYZABCDEFGHIJKLMNOPQRSTUVXYZABCDEFGHIJKLMNOPQRSTUVWYZABCDEFGHIJKLMNOPQRSTUVWXZABCDEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWXYZ"
        print(encrypt(text, key))
    elif action == 'decrypt':
        text = 'ADGJMPSVYBEHKNQTWZCFILORUXADGJMPSVYBEHKNQTWZCFILORUXADGJMPSVYBEHKNQTWZCFILORUXADGJMPSVYBEHKNQTWZCFILORUXADGJMPSVYBEHKNQTWZCFILORUXADGJMPSVYBEHKNQTWZCFILORUXADGJMPSVYBEHKNQTWZCFILORUXADGJMPSVYBEHKNQTWZCFILORUXADGJMPSVYBEHKNQTWZCFILORUXBEHKNQTWZCFILORUXADGJMPSVYBEHKNQTWZCFILORUXADGJMPSVYBEHKNQTWZCFILORUXADGJMPSVYBEHKNQTWZCFILORUXADGJMPSVYBEHKNQTWZCFILORUXADGJMPSVYBEHKNQTWZCFILORUXADGJMPSVYBEHKNQTWZCFILORUXADGJMPSVYBEHKNQTWZCFILORUXADGJMPSVYBEHKNQTWZCFILORUXADGJMPSVYCFILORUXADGJMPSVYBEHKNQTWZCFILORUXADGJMPSVYBEHKNQTWZCFILORUXADGJMPSVYBEHKNQTWZCFILORUXADGJMPSVYBEHKNQTWZCFILORUXADGJMPSVYBEHKNQTWZCFILORUXADGJMPSVYBEHKNQTWZCFILORUXADGJMPSVYBEHKNQTWZCFILORUXADGJMPSVYBEHKNQTWZCFILORUXADGJMPSVYBEHKNQTWZ'
        print(decrypt(text, key))
    else:
        exit()



def encrypt(text, key):
    length = len(text)
    encrypted = str()

    for index in range(key):
        for count in range(index, length, key):
            encrypted += text[count]

    return(encrypted)



def numOfRows(text, key):
    # get number of columns
    columns = math.ceil(len(text) / float(key))
    unused = key * columns - len(text)
    return(int(columns), int(unused))



def decrypt(text, key):
    columns = numOfRows(text, key)[0]
    unused = numOfRows(text, key)[1]
    col, row = 0, 0
    matrix = [''] * columns
    for char in text:
        matrix[col] += char
        col += 1
        if col == columns or (col == columns - 1 and row >= key - unused ):
            row += 1
            col = 0

    text = ''.join(matrix)

    return(text)



if __name__ == '__main__':
    main()



# >>> import transpositionEncrypt as crypt
# >>> crypt.encrypt(text,key)
# >>> crypt.decrypt(text,key)
